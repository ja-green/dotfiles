# function definitions

# limit locate to the current working directory
function locatedir { 
    locate -i $@ | grep `pwd`
}

# limit cat to the current working directory
function catdir {
    cat $(locatedir $@)
}

# allow the use of cat with unknown file locations
function catl {
    cat $(locate -i $@)
}

# allow the use of nano with unknown file locations
function nanol {
    nano $(locate -i $@)
}

# allow .md files to be read cleanly on the command line
function rmd {
    pandoc $@ | lynx -stdin
}

# allow a single row to be output from a multi-row output
function row {
    sed -n ${1}p
}

# allow a single column to be output from a multi-column output
function col {
    awk '{print \$${1}}'
}

function hs {
    if [[ ${#} -eq 0 ]]; then
        history
    else
        history | grep ${@}
    fi
}

function title {
    echo -en "\033]0;${@}\007"
}

function sc {
    screen -dm bash -c '"${@}"; exit;'
}

function cd {
  [[ "${#}" = "0" ]] && builtin cd && return

  case "${1}" in
    ~|-|.|/) builtin cd "${1}" ;;
          *) local __dir="$(fasd -d ${1} | head -1)"
             builtin cd "${__dir:-$1}" ;;
  esac

#  if [[ "${#}" = "0" ]]; then
#    builtin cd
#  elif [[ "${1}" = *"~-./"* ]]: then
#    builtin cd "${1}"
#  else
#    local fasd_dir="$(fasd -d ${1} | head -1)"
#    builtin cd "${fasd_dir:-$1}"
#  fi
}

# allow .docx documents to be output on the command line
function doccat {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.docx|*.doc)  
                        unzip -p "${n}" word/document.xml | sed -e 's/<\/w:p>/\n/g; s/<[^>]\{1,\}>//g; s/[^[:print:]\n]\{1,\}//g' ;;
                    *)
                        cat "${n}" ;;
                esac
            
            else
                echo "'${n}' - file does not exist"
                return 1
            fi
        done
    fi
}

function extract {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                                 tar xvf "$n"       ;;
                    *.lzma)      unlzma ./"$n"      ;;
                    *.bz2)       bunzip2 ./"$n"     ;;
                    *.rar)       unrar x -ad ./"$n" ;;
                    *.gz)        gunzip ./"$n"      ;;
                    *.zip)       unzip ./"$n"       ;;
                    *.z)         uncompress ./"$n"  ;;
                    *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                                 7z x ./"$n"        ;;
                    *.xz)        unxz ./"$n"        ;;
                    *.exe)       cabextract ./"$n"  ;;
                    *.cpio)      cpio -id < ./"$n"  ;;
                    *)
                                 echo "extract: '$n' - unknown archive method"
                                 return 1
                                 ;;
                esac

            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

function open {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [[ -f "$n" ]] ; then
                case "${n%,}" in
                    *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar|*.lzma|   \
                    *.bz2|*.rar|*.gz|*.zip|*.z|*.7z|*.arj|*.cab|*.chm|*.deb|*.dmg| \
                    *.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar|*.xz|*.cpio) 
                        extract "$n"  ;;
                    
                    *)  xdg-open "$n" ;;          
                esac

            elif [[ -d "$n" ]] ; then
                cd "$n"

            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}
