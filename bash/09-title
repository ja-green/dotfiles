git_repo_info() {
  toplevel="$(git rev-parse --show-toplevel 2>/dev/null)"
  toplevel_exit="${?}"

  if [ "${toplevel_exit}" != "0" ]; then
    return
  elif [[ "${toplevel}" != "" ]]; then
    toplevel="${toplevel##/*/}"
  else
    toplevel="$(basename $(git ls-remote --get-url) .git)"
  fi
    
  repo_info="$(git rev-parse --show-prefix --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree 2>/dev/null)"    

  inside_worktree="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  bare_repo="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  inside_gitdir="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  gitdir="${repo_info%$'\n'*}"

  if [[ "${repo_info%$'\n'*}" != "" ]]; then
    prefix="/${repo_info%/$'\n'*}"
  fi
}

bash_title() {
  lastcom="$(fc -ln -1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

  if [ ${#lastcom} -ge 20 ]; then
    lastcom=${lastcom:0:20}...
  fi

  git_repo_info

  if [ "true" = "${inside_gitdir}" ]; then
    echo -e "\033]0;${toplevel}/${gitdir}\007"

  elif [ "true" = "${inside_worktree}" ]; then
    echo -e "\033]0;${toplevel}${prefix}\007"
   
  else
    echo -e "\033]0;${PWD##/*/} ("${lastcom}")\007"
  fi
}

PROMPT_COMMAND='echo -en $(bash_title)'

