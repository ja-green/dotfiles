# function definitions

# allow the use of cat with unknown file locations
function cat {
    [ -f "${1}" ] && command cat "${1}" || command cat "$(fasd -f ${1})"
}

# allow the use of vim with unknown file locations
function vi {
    [ -f "${1}" ] && command vi "${1}" || command vi "$(fasd -f ${1})"
}

# allow .md files to be read cleanly on the command line
function rmd {
    pandoc $@ | lynx -stdin
}

# allow a single row to be output from a multi-row output
function row {
    sed -n ${1}p
}

# allow a single column to be output from a multi-column output
function col {
    awk '{print \$${1}}'
}

# highlight whitespace characters
function ws {
    perl -pe 's/( +)/\033[41m$1\033[00m/g'
}

# show hexdump
function hex {
    od -A n -t x1
}

# show and search history
function hs {
    if [[ ${#} -eq 0 ]]; then
        history
    else
        history | grep ${@}
    fi
}

function title {
    echo -en "\033]0;${@}\007"
}

function sc {
    screen -dm bash -c '"${@}"; exit;'
}

function profile {
    PS4='+ $(date "+%s.%N ($LINENO) ")' bash -x "${@}"
}

function ensime {
  if [ "$(git rev-parse --is-inside-work-tree)" = "true" ]; then
    version_conf=$(grep -h scalaVersion * */* 2>/dev/null | head -1 | awk '{$1=$1};1' | cut -d '"' -f 2)
    read -r version <<< "${version_conf}"

    version="${version%\"}"
    version="${version#\"}"

    repo_exld="$(git rev-parse --absolute-git-dir)/info"
    repo_home="$(git rev-parse --show-toplevel)"
  else
    printf "fatal: must be inside a git repository\n"
    return 1
  fi

  mkdir -p "${repo_exld}"

  [ -f "${repo_exld}/exclude" ] \
    || printf ".ensime*\nensime.sbt\ntags*" > "${repo_exld}/exclude"
  [ -f "${repo_home}/ensime.sbt" ] \
    || printf "scalaVersion in ThisBuild := \"${version:-2.11.11}\"\n" > "${repo_home}/ensime.sbt"

  sbt ensimeConfig 
  sbt test:compile
  sbt ensimeServerIndex
}

function cd {
  [[ "${#}" = "0" ]] && builtin cd && return
  [[ -d "${1}"    ]] && builtin cd "${1}" && return

  case "${1}" in
    ~|-|.|/) builtin cd "${1}" ;;
          *) local __dir="$(fasd -d ${1} | head -1)"
             builtin cd "${__dir:-$1}" ;;
  esac
}

# allow .docx documents to be output on the command line
function doccat {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.docx|*.doc)  
                        unzip -p "${n}" word/document.xml | sed -e 's/<\/w:p>/\n/g; s/<[^>]\{1,\}>//g; s/[^[:print:]\n]\{1,\}//g' ;;
                    *)
                        cat "${n}" ;;
                esac
            
            else
                echo "'${n}' - file does not exist"
                return 1
            fi
        done
    fi
}

function extract {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                                 tar xvf "$n"       ;;
                    *.lzma)      unlzma ./"$n"      ;;
                    *.bz2)       bunzip2 ./"$n"     ;;
                    *.rar)       unrar x -ad ./"$n" ;;
                    *.gz)        gunzip ./"$n"      ;;
                    *.zip)       unzip ./"$n"       ;;
                    *.z)         uncompress ./"$n"  ;;
                    *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                                 7z x ./"$n"        ;;
                    *.xz)        unxz ./"$n"        ;;
                    *.exe)       cabextract ./"$n"  ;;
                    *.cpio)      cpio -id < ./"$n"  ;;
                    *)
                                 echo "extract: '$n' - unknown archive method"
                                 return 1
                                 ;;
                esac

            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

function open {
    if [ -z "$1" ]; then
        return 1
 
    else
        for n in "$@"; do
            if [[ -f "$n" ]] ; then
                case "${n%,}" in
                    *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar|*.lzma|   \
                    *.bz2|*.rar|*.gz|*.zip|*.z|*.7z|*.arj|*.cab|*.chm|*.deb|*.dmg| \
                    *.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar|*.xz|*.cpio) 
                        extract "$n"  ;;
                    
                    *)  xdg-open "$n" ;;          
                esac

            elif [[ -d "$n" ]] ; then
                cd "$n"

            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}
