#!/bin/bash

## Copyright 2018 Jack Green (ja-green)
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

## dotfiles
## tool for managing and installing dotfiles from github.com/ja-green/dotfiles
##
## examples:
## run vat-summary-frontend on it's default port:
##     $ svc start vat-summary-frontend
##
## run view-vat-returns-frontend on port 1234:
##     $ svc start view-vat-returns-frontend -p 1234
##
## stop all running microservices:
##     $ svc stop -a
##
## list all microservices and their status:
##     $ svc list -a
##

## variable definitions

prog_name="$(basename ${0})"
prog_repo="$(locate dotfiles/.git | head -n 1)/.."
prog_vers="$(cat ${prog_repo}/VERSION)"
prog_opts=":ao:e:"
prog_exit=0

commands=("link" "edit" "list")

# main usage text
main="${prog_name} v${prog_vers}\n\nmanage and install dotfiles"

# command usage text
link=("create symlinks for dotfiles" "flags: \
  \n\t-o, --only      specify dotfiles to link \n")
edit=("open dotfiles for editing" "flags: \
  \n\t-a, --all       edit all dotfiles \
  \n\t-e, --editor    specify an editor \n")
list=("list installed dotfiles" "")

# status tags
stat_success="success:"
stat_warn="warn:"
stat_fatal="fatal:"
stat_hint="hint:"

# error messages
err_no_argument="${stat_fatal} option '%s' requires an argument\n"
err_invalid_opt="${stat_fatal} unknown option '%s'\n"
err_invalid_command="${stat_fatal} '%s' is not a known command\n
run '${prog_name} --help' for a list of known commands\n"

usage_end="for help with each command run: \
  \n\t${prog_name} <command> -h | --help\n"

flags_global="global flags: \
  \n\t-h, --help      show this screen \
  \n\t-v, --version   show version information\n"

## usage commands

main_usage() {
  echo -e "${main}\n \
    \nusage:\
    \n\t${prog_name} <command> [options] \
    \n\ncommands:                   \
    \n\tinstall         ${install}  \
    \n\tedit            ${edit}     \
    \n\tlist            ${list}     \n"

  echo -e "${flags_global}"
  echo -e "${usage_end}"

  exit ${prog_exit}
}

command_usage() {
  eval command_array="(\"\${${command}[@]}\")"

  about="${command_array[0]}"
  flags="${command_array[1]}"

  echo -e "${about}\n \
    \nusage: \
    \n\t${prog_name} ${command} [options] \n"

  echo -e "${flags}"
  echo -e "${flags_global}"
  echo -e "${usage_end}"

  exit ${prog_exit}
}

version() {
  echo -e "${prog_name} version ${prog_vers}"

  exit ${prog_exit}
}

## helper commands

is_command() {
  if [[ -z $(printf '%s\n' "${commands[@]}" | grep -w ${1}) ]]; then
    return 1
  fi
}

is_command_set() {
  if [[ ! ${command+x} ]]; then
    return 1
  fi
}

set_command() {
  if ! is_command_set; then
    echo -e "${1}"
  fi
}

die() {
  printf "${1}" "${2}" >&2

  if is_command "${2}"; then
    command_usage
  fi

  prog_exit=1
  exit ${prog_exit}
}

## main commands

sub_link() {
  ln -sf "${prog_repo}/.bashrc"     "${HOME}"
  ln -sf "${prog_repo}/.Xresources" "${HOME}"

  ln -sf "${prog_repo}/pbar/config" "${HOME}/.config/polybar"
  ln -sf "${prog_repo}/i3wm/config" "${HOME}/.config/i3"
}
  
sub_edit() {
  for file in "${prog_repo}"/*; do
    [ -f "$file" ] && ${editor:-$EDITOR} "${file}"
  done
}
  
sub_list() {
  find ${prog_repo} -type f    \
    -not -wholename "./.git"   \
    -not -wholename "./.git/*" \
    -not -name "Makefile"      \
    -not -name "dotfiles*"     \
    -not -name "VERSION*"      \
    -not -name "README*"
}

## parse arguments and begin

if [[ ${#} -eq 0 ]]; then main_usage; fi

while [ -n "${1}" ]; do
  case "${1}" in
    --) shift; break;;
    -*) case "${1}" in
      -a|--all)       all=1 ;;
      -v|--version)   version ;;
      -o|--only)      if [ ! -z "${2}" ];   then only="${2}"   ; else die "${err_no_argument}" "${1}"; fi; shift ;;
      -e|--editor)    if [ ! -z "${2}" ];   then editor="${2}" ; else die "${err_no_argument}" "${1}"; fi; shift ;;
      -h|--help)      if ! is_command_set;  then main_usage    ; else command_usage; fi ;;
      -*)             die "${err_invalid_opt}" "${1}" ;;
    esac ;;

    *) if   is_command "${1}";  then command=$(set_command "${1}")
       elif ! is_command_set;   then die "${err_invalid_command}" "${1}"
       else die "${err_invalid_opt}" "${1}"; fi ;;

    esac
    shift

  done

if ! is_command_set; then
  main_usage
fi

sub_${command}

exit ${prog_exit}

