#!/bin/bash

usage() {
  printf "${1}"
  exit 0
}

die() {
  printf "fatal: ${1}" >&2
  exit 1
}

declare -A JOBS

parallel() {
  eval $1 & JOBS[$!]="${2:-$@}"
}

reap() {
  local cmd
  local status=0

  for pid in ${!JOBS[@]}; do
    cmd=${JOBS[${pid}]}
    wait ${pid} ; JOBS[${pid}]=$?
    if [[ ${JOBS[${pid}]} -ne 0 ]]; then
      status=${JOBS[${pid}]}
      failed="${cmd}"
      break
    fi
  done

  unset JOBS

  return ${status}
}

verify_usage="\
usage: git verify [<options>]

  --no-branch  skip verify branch step
  --no-sbt     skip verify sbt step

"

verify_sbt() {
  parallel "[ $(sbt compile    | grep -c '[error]') -gt 0 ]" # &>/dev/null"
  parallel "[ $(sbt test-quick | grep -c '[error]') -gt 0 ]" # &>/dev/null"
  parallel "[ $(sbt it:test    | grep -c '[error]') -gt 0 ]" # &>/dev/null"
  parallel "[ $(sbt scalastyle | grep -c '[error]') -gt 0 ]" # &>/dev/null"
  parallel "[ $(sbt validate   | grep -c '[error]') -gt 0 ]" # &>/dev/null"

  reap || die "sbt error\n"
}

verify_branch() {
  cbranch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
  [ "${cbranch}" = "master" ] \
    && die "branch should not be 'master'\n"

  [[ "${cbranch}" =~ ^BTAT-[0\-9]{4}$ ]] \
    || die "branch name is incorrectly formatted\n"
}

cmd_verify() {
  [ -z "${no_branch}" ] && verify_branch
  [ -z "${no_sbt}"    ] && verify_sbt
}

main() {
  while [ -n "${1}" ]; do
    case "${1}" in
    --) shift; break;;
    -*) case "${1}" in
    --no-sbt)    no_sbt=1    ;;
    --no_branch) no_branch=1 ;;
    -h|--help)   usage "${verify_usage}" ;;
    -*)          die "unknown flag '${1}'\n" ;;
    esac ;;

    *) die "unknown option '${1}'\n" ;;

    esac
    shift

  done

  cmd_verify
}

main ${@}

exit ${?}
